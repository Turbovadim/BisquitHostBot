const path = require('node:path');
const fs = require('node:fs');
const wait = require('node:timers/promises').setTimeout;
const { Client, GatewayIntentBits, ActivityType, Collection, Partials, Events, ChannelType, PermissionFlagsBits, ButtonStyle, ActionRowBuilder, ButtonBuilder,
    EmbedBuilder
} = require('discord.js');
const { token } = require('./config.json');


const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildMessageReactions, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers], partials: [Partials.Channel] });

client.commands = new Collection();
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    client.commands.set(command.data.name, command);
}

client
    .on(Events.InteractionCreate, async interaction => {
        if (!interaction.isCommand()) return;
        const command = client.commands.get(interaction.commandName);
        if (!command) return;
        try {
            await command.execute(interaction);
        } catch (error) {
            console.error(error);
            await interaction.reply({ content: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!', ephemeral: true });
        }
    })
    .on(Events.InteractionCreate, async interaction => {
        if (!interaction.isButton()) return;

            var createdChannel

            const guild = interaction.guild;
            const role = guild.roles.cache.find(role => role.name === "üïï –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞");
            const role2 = guild.roles.cache.find(role => role.name === "üçã –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫");
            const user = interaction.user.username
            const category = interaction.channel.parentId

        if (interaction.customId === "CloseTicket") {
            await interaction.channel.delete()
        }
        if (interaction.customId === "OpenTicket") {
            await interaction.reply({content: '–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω', ephemeral: true})
            await guild.channels.create({
                name: `ticket-${user}`,
                type: ChannelType.GuildText,
                parent: category,
                permissionOverwrites: [
                    {
                        id: interaction.member,
                        allow: [PermissionFlagsBits.ViewChannel],
                    },
                    {
                        id: interaction.channel.guild.roles.everyone,
                        deny: [PermissionFlagsBits.ViewChannel],
                    },
                    {
                        id: role,
                        allow: [PermissionFlagsBits.ViewChannel],
                    },
                    {
                        id: role2,
                        allow: [PermissionFlagsBits.ViewChannel],
                    },
                ]
            })
                .then(channels => {
                    createdChannel = channels
                });
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('CloseTicket')
                        .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('üîí'),
                );
            const embed = new EmbedBuilder()
                .setColor('#f0ed2b')
                .setTitle('–í–∞—à —Ç–∏–∫–µ—Ç')
                .setDescription(`–≠—Ç–æ –≤–∞—à —Ç–∏–∫–µ—Ç, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. \n\n**–ï—Å–ª–∏ –≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º, —É–∫–∞–∂–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –ª–æ–≥.**`)
            createdChannel.send({embeds: [embed], components: [row]})
            await createdChannel.send({content: `<@${interaction.user.id}>`})
                .then(async message => {
                    await wait(2000);
                    await message.delete()
                })
        }

    })
    .on('ready', () => {
        console.log(`–ó–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
        client.user.setActivity("–ù–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ Bisquit.Host", { type: ActivityType.Watching });
    })
    // .on(Events.InteractionCreate, async interaction => {
    //     if (!interaction.isSelectMenu()) return;
    //     const selected = interaction.values[0];
    //
    //     var createdChannel
    //
    //     const guild = interaction.guild;
    //     const role = guild.roles.cache.find(role => role.name === "–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞");
    //     const role2 = guild.roles.cache.find(role => role.name === "–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫");
    //     const user = interaction.user
    //     const category = interaction.channel.parentId
    //
    //     if (selected === "first_option") {
    //         await interaction.reply({content: '–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç', ephemeral: true})
    //     } else if (selected === "second_option") {
    //         await interaction.reply({content: '–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω', ephemeral: true})
    //         await guild.channels.create({
    //             name: `ticket-${user}`,
    //             type: ChannelType.GuildText,
    //             parent: category,
    //             permissionOverwrites: [
    //                 {
    //                     id: interaction.member,
    //                     allow: [PermissionFlagsBits.ViewChannel],
    //                 },
    //                 {
    //                     id: interaction.channel.guild.roles.everyone,
    //                     deny: [PermissionFlagsBits.ViewChannel],
    //                 },
    //                 {
    //                     id: role,
    //                     allow: [PermissionFlagsBits.ViewChannel],
    //                 },
    //                 {
    //                     id: role2,
    //                     allow: [PermissionFlagsBits.ViewChannel],
    //                 },
    //             ]
    //         })
    //             .then(channels => {
    //                 createdChannel = channels
    //             });
    //         const row = new ActionRowBuilder()
    //             .addComponents(
    //                 new ButtonBuilder()
    //                     .setCustomId('CloseTicket')
    //                     .setLabel('–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
    //                     .setStyle(ButtonStyle.Danger)
    //                     .setEmoji('üîí'),
    //             );
    //         const embed = new EmbedBuilder()
    //             .setColor('#f0ed2b')
    //             .setTitle('–í–∞—à —Ç–∏–∫–µ—Ç')
    //             .setDescription(`–≠—Ç–æ –≤–∞—à —Ç–∏–∫–µ—Ç, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. \n\n**–ï—Å–ª–∏ –≤–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º, —É–∫–∞–∂–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –ª–æ–≥.**`)
    //         createdChannel.send({embeds: [embed], components: [row]})
    //         await createdChannel.send({content: `<@${interaction.user.id}>`})
    //             .then(async message => {
    //                 await wait(2000);
    //                 await message.delete()
    //             })
    //     }
    // })

client.login(token);